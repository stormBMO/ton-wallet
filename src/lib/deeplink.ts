import { Address } from '@ton/core';

export interface TokenForLink {
  symbol: string;
  address?: string; // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ TON (jetton master address)
}

/**
 * –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –≤ testnet non-bounceable —Ñ–æ—Ä–º–∞—Ç.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç @ton/core –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º checksum.
 */
function normalizeForTestnet(addressString: string): string {
    try {
        // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é @ton/core
        const address = Address.parse(addressString);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ testnet non-bounceable —Ñ–æ—Ä–º–∞—Ç
        const testnetAddress = address.toString({
            urlSafe: true,
            bounceable: false,
            testOnly: true
        });
        
        console.log('üîÑ Converted to testnet non-bounceable:', testnetAddress);
        return testnetAddress;
    } catch (error) {
        console.error('‚ùå Failed to parse address:', error);
        console.log('üìç Using original address:', addressString);
        return addressString;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TON-deeplink –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞.
 * @param userWalletAddress –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param token –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ. –ï—Å–ª–∏ undefined –∏–ª–∏ symbol === 'TON', –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –¥–ª—è TON.
 *              –î–ª—è jetton-–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ token.address.
 * @returns –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è TON-deeplink —Å—Ç—Ä–æ–∫–∞.
 */
export const getTonLink = (userWalletAddress: string, token?: TokenForLink): string => {
    if (!userWalletAddress) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.error('User wallet address is required to generate a deeplink.');
        return ''; // –ò–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è testnet
    const normalizedAddress = normalizeForTestnet(userWalletAddress);
    
    console.log('üîó Original address:', userWalletAddress);
    console.log('üìç Normalized for testnet:', normalizedAddress);
    console.log('ü™ô Token info:', token);

    if (!token || token.symbol === 'TON') {
        const deeplink = `ton://transfer/${normalizedAddress}`;
        console.log('‚úÖ Generated TON deeplink:', deeplink);
        return deeplink;
    }
  
    // –î–ª—è jetton transfers
    if (token.address) {
        const deeplink = `ton://transfer/${normalizedAddress}?jetton=${token.address}`;
        console.log('‚úÖ Generated Jetton deeplink:', deeplink);
        return deeplink;
    }
    
    // Fallback
    const deeplink = `ton://transfer/${normalizedAddress}`;
    console.log('‚ö†Ô∏è Fallback TON deeplink:', deeplink);
    return deeplink;
}; 